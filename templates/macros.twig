{% macro exceptionChainPills(exception, _no) %}
    {% import _self as functions %}

    {% set no = _no|default(1) %}

    <li class="nav-item">
        <a href="#main-exception-{{ no }}" class="nav-link{{ (1 == no ? ' active')|raw }}" data-toggle="tab">
            {{ exception.getOriginalClass() }}
            {% if no > 1 or exception.hasPrevious() %}
                {{ ' ' }}#{{ no }}
            {% endif %}
        </a>
    </li>

    {% if exception.hasPrevious() %}
        {{ functions.exceptionChainPills(exception.getPrevious(), no+1) }}
    {% endif %}
{% endmacro %}

{% macro exception(exception, editor, hasEditor, no) %}
    <h2>Exception</h2>
    {% set class = exception.getOriginalClass() %}
    {% set message = exception.getMessage() %}

    <div class="card">
        <div class="card-header">
            <strong>{{ class }} (code {{ exception.getCode() }})</strong>{{ message != '' ? ' ' ~ message }}
        </div>
        <div class="card-body">
            <ul class="short-stack-trace">
                {% set ds = constant('DIRECTORY_SEPARATOR') %}
                {% for step in exception.getStackTrace() %}

                    {% set stepIndex = loop.index0 %}
                    {% set stepKey = 'e' ~ no ~ '-s' ~ stepIndex %}

                    <li>
                        <a href="#step-{{ stepKey }}">
                            #{{ loop.index0 }}

                            {% if step.hasCalledFunction %}
                                {% set calledFunction = step.getCalledFunction() %}
                                {% set isDeprecated = calledFunction.isDeprecated() %}
                                {% if isDeprecated %}<s>{% endif %}
                                {{ ' ' }}{{ calledFunction.getName() }}()
                                {% if isDeprecated %}</s>{% endif %}
                            {% endif %}

                            {% if step.hasPlaceInCode %}

                                {% if step.hasCalledFunction %} at{% endif %}

                                {% set placeInCode = step.getPlaceInCode() %}
                                {% set fileName = placeInCode.getFileName()|split(ds)|slice(-3)|join(ds) %}
                                {% if fileName != placeInCode.getFileName() %}
                                    {% set fileName = '(...)' ~ ds ~ fileName %}
                                {% endif %}
                                {{ ' ' }}{{ fileName }}:{{ placeInCode.getLineNumber() }}
                            {% endif %}
                        </a>
                    </li>
                {% endfor %}
            </ul>
        </div>
    </div>

    <h2>Stack trace</h2>

    {% for step in exception.getStackTrace() %}
        {% set stepIndex = loop.index0 %}
        {% set stepKey = 'e' ~ no ~ '-s' ~ stepIndex %}
        {% include 'exception-step.twig' %}
    {% endfor %}
{% endmacro %}

{% macro exceptionChain(exception, editor, hasEditor, _no) %}
    {% import _self as functions %}

    {% set no = _no|default(1) %}

    <div class="tab-pane fade{{ 1 == no ? ' show active' }} view-tab" id="main-exception-{{ no }}">
        {{ functions.exception(exception, editor, hasEditor, no) }}
    </div>

    {% if exception.hasPrevious() %}
        {{ functions.exceptionChain(exception.getPrevious(), editor, hasEditor, no+1) }}
    {% endif %}
{% endmacro %}
